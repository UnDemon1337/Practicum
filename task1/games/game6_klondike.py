from task1.utils.input_validation import get_valid_input  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç


class KlondikeGame:
    def __init__(self):
        self.board_size = 10
        self.board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]
        self.current_player = 1
        self.game_over = False
        self.winner = None

    def print_board(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ"""
        print("\n" + "=" * 50)
        print("           –ò–ì–†–ê: –ö–õ–û–ù–î–ê–ô–ö")
        print("=" * 50)
        print("   " + " ".join(str(i) for i in range(self.board_size)))

        for i in range(self.board_size):
            row_display = [str(i)]
            for j in range(self.board_size):
                if self.board[i][j] == 'X':
                    row_display.append('X')
                elif self.board[i][j] == 'O':
                    row_display.append('O')
                else:
                    row_display.append('.')
            print(" " + " ".join(row_display))

        print("=" * 50)
        print(f"–ò–≥—Ä–æ–∫ 1: X | –ò–≥—Ä–æ–∫ 2: O")
        print(f"–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: –ò–≥—Ä–æ–∫ {self.current_player}")
        print("=" * 50)

    def is_valid_move(self, move_input):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        try:
            coords = move_input.split()
            if len(coords) != 2:
                return False, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!"

            row, col = int(coords[0]), int(coords[1])

            if row < 0 or row >= self.board_size or col < 0 or col >= self.board_size:
                return False, f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ {self.board_size - 1}!"

            if self.board[row][col] != ' ':
                return False, "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!"

            return True, ""

        except ValueError:
            return False, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"

    def make_move(self, row, col):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞"""
        mark = 'X' if self.current_player == 1 else 'O'
        self.board[row][col] = mark

    def check_chain_length(self, row, col, dx, dy):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω—É —Ü–µ–ø–æ—á–∫–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        mark = self.board[row][col]
        length = 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        r, c = row + dx, col + dy
        while 0 <= r < self.board_size and 0 <= c < self.board_size and self.board[r][c] != ' ':
            length += 1
            r += dx
            c += dy

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        r, c = row - dx, col - dy
        while 0 <= r < self.board_size and 0 <= c < self.board_size and self.board[r][c] != ' ':
            length += 1
            r -= dx
            c -= dy

        return length

    def check_loss_condition(self, row, col):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞–ª –ª–∏ —Ö–æ–¥ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é —Ü–µ–ø–æ—á–∫—É"""
        # –í—Å–µ 8 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å, –≤–µ—Ä—Ç–∏–∫–∞–ª—å, –¥–≤–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        directions = [
            (0, 1),  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å –≤–ø—Ä–∞–≤–æ
            (1, 0),  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å –≤–Ω–∏–∑
            (1, 1),  # –¥–∏–∞–≥–æ–Ω–∞–ª—å –≤–ø—Ä–∞–≤–æ-–≤–Ω–∏–∑
            (1, -1),  # –¥–∏–∞–≥–æ–Ω–∞–ª—å –≤–ª–µ–≤–æ-–≤–Ω–∏–∑
            (0, -1),  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å –≤–ª–µ–≤–æ
            (-1, 0),  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å –≤–≤–µ—Ä—Ö
            (-1, -1),  # –¥–∏–∞–≥–æ–Ω–∞–ª—å –≤–ª–µ–≤–æ-–≤–≤–µ—Ä—Ö
            (-1, 1)  # –¥–∏–∞–≥–æ–Ω–∞–ª—å –≤–ø—Ä–∞–≤–æ-–≤–≤–µ—Ä—Ö
        ]

        for dx, dy in directions:
            chain_length = self.check_chain_length(row, col, dx, dy)
            if chain_length >= 3:
                return True

        return False

    def is_board_full(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –≤—Å–µ –ø–æ–ª–µ"""
        for row in self.board:
            if ' ' in row:
                return False
        return True

    def switch_player(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞"""
        self.current_player = 3 - self.current_player  # 1 -> 2, 2 -> 1

    def play_round(self):
        """–û–¥–∏–Ω —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã"""
        self.print_board()

        move_input = get_valid_input(
            f"–ò–≥—Ä–æ–∫ {self.current_player}, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∞ —Å—Ç–æ–ª–±–µ—Ü): ",
            validation_func=self.is_valid_move,
            error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

        row, col = map(int, move_input.split())
        self.make_move(row, col)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
        if self.check_loss_condition(row, col):
            self.game_over = True
            self.winner = 3 - self.current_player  # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –∏–≥—Ä–æ–∫
            self.print_board()
            print(f"\nüí• –ò–≥—Ä–æ–∫ {self.current_player} —Å–æ–∑–¥–∞–ª —Ü–µ–ø–æ—á–∫—É –∏–∑ 3+ —Ñ–∏—à–µ–∫!")
            print(f"üéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: –ò–≥—Ä–æ–∫ {self.winner}!")
        elif self.is_board_full():
            self.game_over = True
            self.print_board()
            print(f"\nüèÅ –í—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
            print("üìù –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–ò–ß–¨–Ø!")
        else:
            self.switch_player()

    def play(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å"""
        print("=" * 50)
        print("           –ò–ì–†–ê: –ö–õ–û–ù–î–ê–ô–ö")
        print("=" * 50)
        print("–ü—Ä–∞–≤–∏–ª–∞:")
        print("- –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ: 10x10 –∫–ª–µ—Ç–æ–∫")
        print("- –ò–≥—Ä–æ–∫ 1 —Å—Ç–∞–≤–∏—Ç X, –ò–≥—Ä–æ–∫ 2 —Å—Ç–∞–≤–∏—Ç O")
        print("- –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏")
        print("- –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –ø–æ—Å–ª–µ —á—å–µ–≥–æ —Ö–æ–¥–∞ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è")
        print("  —Ü–µ–ø–æ—á–∫–∞ –∏–∑ 3+ —Ñ–∏—à–µ–∫ (–≤–∫–ª—é—á–∞—è —Ñ–∏—à–∫–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞)")
        print("- –¶–µ–ø–æ—á–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª—é–±–æ–º –∏–∑ 8 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        print("- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–≤–æ–¥—è—Ç—Å—è –∫–∞–∫ '—Å—Ç—Ä–æ–∫–∞ —Å—Ç–æ–ª–±–µ—Ü' (0-9)")
        print("=" * 50)
        print("–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã!")

        while not self.game_over:
            self.play_round()


def play():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    game = KlondikeGame()
    game.play()

    # –°–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä–µ
    while True:
        choice = input("\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if choice in ['–¥–∞', '–¥', 'yes', 'y']:
            play()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            break
        elif choice in ['–Ω–µ—Ç', '–Ω', 'no', 'n']:
            print("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            break
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")